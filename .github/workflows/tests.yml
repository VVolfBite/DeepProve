name: "Rust tests & lint"
permissions:
  contents: read

on:
  push:
    tags:
      - '**'
    branches:
      - master
  pull_request:

jobs:
  changes:
    name: Check for changes in zkML sources
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    outputs:
      zkml_src: ${{ steps.filter.outputs.zkml_src }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            zkml_src:
              - 'zkml/**'
              - 'mpcs/**'
              - '.github/workflows/tests.yml'
              - 'rust-toolchain.toml'

  test:
    name: Run zkML Rust tests
    needs: changes
    if: ${{ needs.changes.outputs.zkml_src != '[]' }}
    runs-on: ['hostname:hetzner-dedicated-6']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r zkml/assets/scripts/requirements.txt

      - name: Create directory for Python script assets
        run: mkdir -p ./ci_py_assets

      - name: Run Python script to generate assets
        run: python zkml/assets/scripts/llms/gpt2_internal.py --output-dir ./zkml/assets/scripts/llms/ --export-model

      - name: Set Environment Variables for Rust tests
        run: |
          echo "DEEPPROVE_CI=true" >> "$GITHUB_ENV"
          echo "DEEPPROVE_ASSET_DIR=${{ github.workspace }}/zkml/assets/scripts/llms/" >> "$GITHUB_ENV"

      - name: Set RNG seed
        run: |
          seed="$(date +%s)"
          echo RNG seed: "$seed"
          echo RNG_SEED="$seed" >> "$GITHUB_ENV"

      - name: Install protoc via apt
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
          # Manually configure rust-cache
          cache: false

      - name: Restore model cache folder
        uses: actions/cache@v4
        with:
          path: target/test_assets_cache
          key: model-cache-${{ hashFiles('my_folder/**') }}
          restore-keys: |
            model-cache-

      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          # The prefix cache key, this can be changed to start a new cache manually.
          # default: "v0-rust"
          shared-key: "v1-rust-dp"
          # If `true` the workspace crates will be cached.
          # Useful if the workspace contains libraries that are only updated sporadically.
          # default: "false"
          cache-workspace-crates: true

      - name: Run cargo test
        run: cargo test
        env:
          RUSTFLAGS: "-W warnings"

      - name: Run Clippy
        run: cargo clippy --all -- -D warnings


  formatting:
    name: Validate code formatting
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.zkml_src != '[]' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
          cache: false
      - run: cargo fmt --all
