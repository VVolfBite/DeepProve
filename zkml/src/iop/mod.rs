use std::collections::HashMap;

use crate::{
    commit::context::ModelOpeningProof,
    layers::{LayerProof, provable::NodeId},
    lookup::logup_gkr::structs::LogUpProof,
};
use ff_ext::ExtensionField;
use mpcs::PolynomialCommitmentScheme;
use serde::{Deserialize, Serialize, de::DeserializeOwned};
pub mod context;
pub mod prover;
pub mod verifier;

pub use context::Context;
use transcript::Transcript;
use rmp_serde;

/// Contains all cryptographic material generated by the prover
#[derive(Clone, Serialize, Deserialize)]
#[serde(bound(serialize = "E: Serialize", deserialize = "E: DeserializeOwned"))]
pub struct Proof<E: ExtensionField, PCS: PolynomialCommitmentScheme<E>>
where
    E::BaseField: Serialize + DeserializeOwned,
{
    /// The successive sumchecks proofs. From output layer to input.
    steps: HashMap<NodeId, LayerProof<E, PCS>>,
    /// The proofs for any lookup tables used
    table_proofs: Vec<TableProof<E, PCS>>,
    /// the commitment proofs related to the weights
    commit: ModelOpeningProof<E, PCS>,
}

impl<E, PCS> Proof<E, PCS>
where
    E: ExtensionField,
    E::BaseField: Serialize + DeserializeOwned,
    PCS: PolynomialCommitmentScheme<E>,
{
    /// Deserialize a layer proof from MessagePack bytes (as saved by push_proof).
    pub fn deserialize_layer_proof(bytes: &[u8]) -> anyhow::Result<LayerProof<E, PCS>> {
        let proof: LayerProof<E, PCS> = rmp_serde::from_slice(bytes)?;
        Ok(proof)
    }
    
    /// Serialize the entire proof to MessagePack bytes
    pub fn serialize(&self) -> anyhow::Result<Vec<u8>>
    where
        E: Serialize,
    {
        let bytes = rmp_serde::to_vec_named(self)?;
        Ok(bytes)
    }
    
    /// Deserialize the entire proof from MessagePack bytes
    pub fn deserialize(bytes: &[u8]) -> anyhow::Result<Self>
    where
        E: DeserializeOwned,
    {
        let proof: Self = rmp_serde::from_slice(bytes)?;
        Ok(proof)
    }
    
    /// Save the entire proof to file
    pub fn save_to_file<P: AsRef<std::path::Path>>(&self, path: P) -> anyhow::Result<()>
    where
        E: Serialize,
    {
        let bytes = self.serialize()?;
        std::fs::write(path, bytes)?;
        Ok(())
    }
    
    /// Load the entire proof from file
    pub fn load_from_file<P: AsRef<std::path::Path>>(path: P) -> anyhow::Result<Self>
    where
        E: DeserializeOwned,
    {
        let bytes = std::fs::read(path)?;
        Self::deserialize(&bytes)
    }
    
    /// Serialize a single layer proof to MessagePack bytes
    pub fn serialize_layer_proof(proof: &LayerProof<E, PCS>) -> anyhow::Result<Vec<u8>>
    where
        E: Serialize,
    {
        let bytes = rmp_serde::to_vec_named(proof)?;
        Ok(bytes)
    }
}

#[derive(Clone, Serialize, Deserialize)]
#[serde(bound(serialize = "E: Serialize", deserialize = "E: DeserializeOwned"))]
pub struct TableProof<E: ExtensionField, PCS>
where
    PCS: PolynomialCommitmentScheme<E>,
    E::BaseField: Serialize + DeserializeOwned,
{
    /// The commitment to the multiplicity polynomial
    multiplicity_commit: PCS::Commitment,
    /// the lookup protocol proof for the table fractional sumcheck
    lookup: LogUpProof<E>,
}

impl<E, PCS> TableProof<E, PCS>
where
    E: ExtensionField,
    PCS: PolynomialCommitmentScheme<E>,
    E::BaseField: Serialize + DeserializeOwned,
{
    /// gets a reference to the inner commitment
    pub fn get_commitment(&self) -> &PCS::Commitment {
        &self.multiplicity_commit
    }
}
#[derive(Debug, Clone, Default)]
pub struct ChallengeStorage<E: ExtensionField> {
    /// This is the constant challenge looked in the lookup PIOPs
    pub constant_challenge: E,
    /// This is the map containing different values related to different tables/lookups
    pub challenge_map: HashMap<String, E>,
}

impl<E> ChallengeStorage<E>
where
    E: ExtensionField + Serialize + DeserializeOwned,
    E::BaseField: Serialize + DeserializeOwned,
{
    pub fn initialise<T: Transcript<E>, PCS: PolynomialCommitmentScheme<E>>(
        ctx: &Context<E, PCS>,
        transcript: &mut T,
    ) -> Self {
        let constant_challenge = transcript
            .get_and_append_challenge(b"table_constant")
            .elements;
        let challenge_map = ctx
            .lookup
            .iter()
            .map(|table_type| {
                let challenge = table_type.generate_challenge(transcript);

                (table_type.name(), challenge)
            })
            .collect::<HashMap<String, E>>();
        Self {
            constant_challenge,
            challenge_map,
        }
    }

    pub fn get_challenges_by_name(&self, name: &String) -> Option<(E, E)> {
        self.challenge_map
            .get(name)
            .map(|challenges| (self.constant_challenge, *challenges))
    }
}

#[cfg(test)]
mod test {
    use ff_ext::GoldilocksExt2;

    use crate::{default_transcript, init_test_logging_default, model::Model, testing::Pcs};

    use super::{Context, prover::Prover, verifier::verify};

    type F = GoldilocksExt2;

    #[test]
    fn test_prover_steps_generic() {
        init_test_logging_default();
        let (model, input) = Model::random(4).unwrap();
        model.describe();
        let trace = model.run(&input).unwrap();
        let io = trace.to_verifier_io();
        let ctx =
            Context::<F, Pcs<F>>::generate(&model, None, None).expect("unable to generate context");
        let mut prover_transcript = default_transcript();
        let prover = Prover::<_, _, _>::new(&ctx, &mut prover_transcript);
        let proof = prover.prove(trace).expect("unable to generate proof");
        let mut verifier_transcript = default_transcript();
        verify::<_, _, _>(ctx, proof, io, &mut verifier_transcript).expect("invalid proof");
    }

    #[test]
    fn test_prover_steps_pooling() {
        init_test_logging_default();
        let (model, input) = Model::random_pooling(4).unwrap();
        model.describe();
        let trace = model.run(&input).unwrap();
        let io = trace.to_verifier_io();
        let ctx =
            Context::<F, Pcs<F>>::generate(&model, None, None).expect("unable to generate context");
        let mut prover_transcript = default_transcript();
        let prover = Prover::<_, _, _>::new(&ctx, &mut prover_transcript);
        let proof = prover.prove(trace).expect("unable to generate proof");
        let mut verifier_transcript = default_transcript();
        verify::<_, _, _>(ctx, proof, io, &mut verifier_transcript).expect("invalid proof");
    }
}
